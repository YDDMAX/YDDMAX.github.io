<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YDDMAX</title>
  <subtitle>代码奔腾</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://YDDMAX.github.io/"/>
  <updated>2017-06-03T13:16:32.014Z</updated>
  <id>http://YDDMAX.github.io/</id>
  
  <author>
    <name>yunzhu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>负载均衡</title>
    <link href="http://YDDMAX.github.io/2017/06/03/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <id>http://YDDMAX.github.io/2017/06/03/负载均衡/</id>
    <published>2017-06-03T13:15:10.000Z</published>
    <updated>2017-06-03T13:16:32.014Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h1><blockquote>
<p>DNS负责提供域名解析服务，当访问某个站点时，实际上首先需要通过该站点域名的DNS服务器来获取域名指向的IP地址，在这一过程中，DNS服务器完成了域名到IP地址的映射，同样，这样映射也可以是一对多的，这时候，DNS服务器便充当了负载均衡调度器，它就像http重定向转换策略一样，将用户的请求分散到多台服务器上，但是它的实现机制完全不同。</p>
</blockquote>
<p>下图展示百度有三个IP地址：<br><img src="http://oqxil93b6.bkt.clouddn.com/images/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/baidu-dns.png" alt="百度DNS"></p>
<ul>
<li><strong>优点:</strong></li>
</ul>
<ol>
<li>可以根据用户IP来进行智能解析。DNS服务器可以在所有可用的A记录中寻找离用记最近的一台服务器。</li>
<li>动态DNS：在每次IP地址变更时，及时更新DNS服务器。当然，因为缓存，一定的延迟不可避免。</li>
</ol>
<ul>
<li><strong>缺点:</strong></li>
</ul>
<ol>
<li>没有用户能直接看到DNS解析到了哪一台实际服务器，加服务器运维人员的调试带来了不便。</li>
<li>策略的局限性。例如你无法将HTTP请求的上下文引入到调度策略中，而在前面介绍的基于HTTP重定向的负载均衡系统中，调度器工作在HTTP层面，它可以充分理解HTTP请求后根据站点的应用逻辑来设计调度策略，比如根据请求不同的URL来进行合理的过滤和转移。</li>
<li>如果要根据实际服务器的实时负载差异来调整调度策略，这需要DNS服务器在每次解析操作时分析各服务器的健康状态，对于DNS服务器来说，这种自定义开发存在较高的门槛，更何况大多数站点只是使用第三方DNS服务。</li>
<li>DNS记录缓存，各级节点的DNS服务器不同程序的缓存会让你晕头转向。</li>
<li><p>基于以上几点，DNS服务器并不能很好地完成工作量均衡分配，最后，是否选择基于DNS的负载均衡方式完全取决于你的需要。</p>
<h1 id="HTTP重定向"><a href="#HTTP重定向" class="headerlink" title="HTTP重定向"></a>HTTP重定向</h1><blockquote>
<p>当http代理（比如浏览器）向web服务器请求某个URL后，web服务器可以通过http响应头信息中的Location标记来返回一个新的URL。这意味着HTTP代理需要继续请求这个新的URL，完成自动跳转。</p>
</blockquote>
</li>
<li><p>吞吐率限制<br>主站点服务器的吞吐率平均分配到了被转移的服务器。现假设使用RR（Round Robin）调度策略，子服务器的最大吞吐率为1000reqs/s，那么主服务器的吞吐率要达到3000reqs/s才能完全发挥三台子服务器的作用，那么如果有100台子服务器，那么主服务器的吞吐率可想而知得有大？相反，如果主服务的最大吞吐率为6000reqs/s，那么平均分配到子服务器的吞吐率为2000reqs/s，而现子服务器的最大吞吐率为1000reqs/s，因此就得增加子服务器的数量，增加到6个才能满足。</p>
</li>
<li>重定向访问深度不同<br>有的重定向一个静态页面，有的重定向相比复杂的动态页面，那么实际服务器的负载差异是不可预料的，而主站服务器却一无所知。因此整站使用重定向方法做负载均衡不太好。</li>
</ol>
<p>我们需要权衡转移请求的开销和处理实际请求的开销，前者相对于后者越小，那么重定向的意义就越大，例如下载。你可以去很多镜像下载网站试下，会发现基本下载都使用了Location做了重定向。</p>
<h1 id="LVS（四层）"><a href="#LVS（四层）" class="headerlink" title="LVS（四层）"></a>LVS（四层）</h1><p>以下内容参考自<a href="http://www.tuicool.com/articles/vQzmi2" target="_blank" rel="external">LVS</a></p>
<h2 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h2><p>通过将请求报文的目标地址和目标端口修改为挑选出的某RS的RIP和PORT实现转发；<br>特点：</p>
<ol>
<li><strong>RIP和DIP必须在同一IP网络,且使用私网地址RS的网关应该指向DIP(保证响应报文必须经由VS)</strong></li>
<li><strong>请求和响应报文都要经由director转发；极高负载的场景中，Director可能会成为系统性能瓶颈</strong></li>
<li>支持端口映射</li>
<li>VS必须为Linux，RS可以是任意的OS</li>
<li><strong>调度器上需要两块网卡,一个配置vip 一个配置dip</strong><br><img src="http://oqxil93b6.bkt.clouddn.com/nat.png" alt="NAT"><h2 id="FULLNAT"><a href="#FULLNAT" class="headerlink" title="FULLNAT"></a>FULLNAT</h2>非标准模型, ipvs默认不支持,ipvsadm也不支持。<br>NAT模式的扩展（阿里云的四层SLB使用的是此方式，因为此种方式下负载均衡器和后端服务器的部署不需要部署在同一网络内）<br>通过同时修改请求报文的源IP地址（cip–&gt;dip）和目标IP地址（vip –&gt; rip）实现转发<br>特点：</li>
<li>调度器和后端服务器可以不在同一IP网络中</li>
<li>RS收到的请求报文的源IP为DIP，因此其响应报文将发送给DIP；</li>
<li>请求报文和响应报文都必须经由director；</li>
<li>支持端口映射；</li>
<li>RS可使用任意OS；<br><img src="http://oqxil93b6.bkt.clouddn.com/fullNAT.png" alt="fullNAT"><h2 id="DR"><a href="#DR" class="headerlink" title="DR"></a>DR</h2>直接路由<br>通过为请求报文重新封装一个MAC首部进行转发,源MAC是DIP所在接口的MAC,目标MAC是挑选出的某RS的RIP所在接口的MAC地址；IP首部不会发生变化（源IP为CIP，目标IP始终为VIP） </li>
<li>RS跟Director必须在同一物理网络中；RS的网关必须不能指向DIP</li>
<li><strong>请求报文必须由Director调度，但响应报文必须不能经由Director</strong></li>
<li><strong>不支持端口映射</strong></li>
<li>各RS可以使用大多数的OS；一般是linux</li>
</ol>
<p>情形1: RIP DIP VIP 都在一个网络, 都是公网IP 地址<br><img src="http://oqxil93b6.bkt.clouddn.com/dr-same.png" alt="dr-same"></p>
<p>情形2: VIP 是公网ip地址, RIP,DIP是私有地址, 情况要复制些, RS要通过另一个路由出去<br><img src="http://oqxil93b6.bkt.clouddn.com/dr-no-same.png" alt="dr-nosame"></p>
<p>注意:<br>一个路由其可以有多个网络接口<br>一个交换机可以承载多个ip网络<br>所以路由器1和路由器2可以使用同一个<br>私网交换机和公网交换机也可以用同一个</p>
<h2 id="TUN"><a href="#TUN" class="headerlink" title="TUN"></a>TUN</h2><p>ip tunnel，ip隧道<br>转发方式：不修改请求报文的IP首部（源IP为CIP，目标IP为VIP），而是在原有的IP首部之外再次封装一个IP首部（源IP为DIP，目标IP为RIP）</p>
<ol>
<li>RIP，DIP，VIP全得是公网地址</li>
<li>RS的网关不能也不可能指向DIP</li>
<li>请求报文经由Director调度，但响应报文将直接发给CIP</li>
<li>不支持端口映射</li>
<li>RS的OS必须支持IP隧道功能；</li>
<li><strong>容易超出MTU,  弊端比较大</strong></li>
</ol>
<p><img src="http://oqxil93b6.bkt.clouddn.com/tunnel.png" alt="tunnel"></p>
<h1 id="反向代理（七层）"><a href="#反向代理（七层）" class="headerlink" title="反向代理（七层）"></a>反向代理（七层）</h1><p>这个肯定大家都有所接触，因为几乎所有主流的Web服务器都热衷于支持基于反向代理的负载均衡。<br>相比前面的HTTP重定向和DNS解析，反向代理的调度器扮演的是用户和实际服务器中间人的角色：</p>
<ol>
<li>任何对于实际服务器的HTTP请求都必须经过调度器</li>
<li>调度器必须等待实际服务器的HTTP响应，并将它反馈给用户（前两种方式不需要经过调度反馈，是实际服务器直接发送给用户）</li>
</ol>
<ul>
<li><strong>优点：</strong></li>
</ul>
<ol>
<li>调度策略丰富。例如可以为不同的实际服务器设置不同的权重，以达到能者多劳的效果。</li>
<li>对反向代理服务器的并发处理能力要求高，因为它工作在HTTP层面。</li>
<li>反向代理服务器可以监控后端服务器，比如系统负载、响应时间、是否可用、TCP连接数、流量等，从而根据这些数据调整负载均衡的策略。</li>
<li>反射代理服务器可以让用户在一次会话周期内的所有请求始终转发到一台特定的后端服务器上（粘滞会话），这样的好处一是保持session的本地访问，二是防止后端服务器的动态内存缓存的资源浪费。</li>
</ol>
<ul>
<li><strong>缺点：</strong><br>反向代理服务器进行转发操作本身是需要一定开销的，比如创建线程、与后端服务器建立TCP连接、接收后端服务器返回的处理结果、分析HTTP头部信息、用户空间和内核空间的频繁切换等，虽然这部分时间并不长，但是当后端服务器处理请求的时间非常短时，转发的开销就显得尤为突出。例如请求静态文件，更适合使用前面介绍的基于DNS的负载均衡方式。<h1 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h1>一般工作在四层。<br>性能较高，但是价格昂贵。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;DNS&quot;&gt;&lt;a href=&quot;#DNS&quot; class=&quot;headerlink&quot; title=&quot;DNS&quot;&gt;&lt;/a&gt;DNS&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;DNS负责提供域名解析服务，当访问某个站点时，实际上首先需要通过该站点域名的DNS服务器来获取域名指向的I
    
    </summary>
    
      <category term="technology" scheme="http://YDDMAX.github.io/categories/technology/"/>
    
    
      <category term="technology" scheme="http://YDDMAX.github.io/tags/technology/"/>
    
      <category term="负载均衡" scheme="http://YDDMAX.github.io/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
  </entry>
  
  <entry>
    <title>�ܹ��İ��ٰ˳ܺ�20������</title>
    <link href="http://YDDMAX.github.io/2017/06/03/%E6%9E%B6%E6%9E%84%E7%9A%84%E5%85%AB%E8%8D%A3%E5%85%AB%E8%80%BB%E5%92%8C20%E4%B8%AA%E8%83%BD%E5%8A%9B/"/>
    <id>http://YDDMAX.github.io/2017/06/03/架构的八荣八耻和20个能力/</id>
    <published>2017-06-03T12:27:20.000Z</published>
    <updated>2017-06-03T12:33:17.356Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oqxil93b6.bkt.clouddn.com/images/%E6%9E%B6%E6%9E%84%E7%9A%84%E5%85%AB%E8%8D%A3%E5%85%AB%E8%80%BB%E5%92%8C20%E4%B8%AA%E8%83%BD%E5%8A%9B/barongbachi.png" alt="�ܹ��İ��ٰ˳�"></p>
<hr>
<p><img src="http://oqxil93b6.bkt.clouddn.com/images/%E6%9E%B6%E6%9E%84%E7%9A%84%E5%85%AB%E8%8D%A3%E5%85%AB%E8%80%BB%E5%92%8C20%E4%B8%AA%E8%83%BD%E5%8A%9B/architecture-ability.png" alt="�˴�����ͼƬ������"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oqxil93b6.bkt.clouddn.com/images/%E6%9E%B6%E6%9E%84%E7%9A%84%E5%85%AB%E8%8D%A3%E5%85%AB%E8%80%BB%E5%92%8C20%E4%B8%AA%E8%
    
    </summary>
    
      <category term="technology" scheme="http://YDDMAX.github.io/categories/technology/"/>
    
    
      <category term="architecture" scheme="http://YDDMAX.github.io/tags/architecture/"/>
    
  </entry>
  
  <entry>
    <title>聚石塔</title>
    <link href="http://YDDMAX.github.io/2017/06/03/%E8%81%9A%E7%9F%B3%E5%A1%94/"/>
    <id>http://YDDMAX.github.io/2017/06/03/聚石塔/</id>
    <published>2017-06-03T11:32:45.000Z</published>
    <updated>2017-06-03T12:24:19.652Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://yq.aliyun.com/articles/60879" target="_blank" rel="external">遵循互联网架构“八荣八耻”，解析EWS高质量架构6个维度的20个能力</a>，本文简单介绍了聚石塔和EWS。</p>
<hr>
<blockquote>
<p><strong>聚石塔</strong>是阿里为卖家系统提供的云计算环境，该云环境在全球提供了相应的负载均衡、安全、计算、存储等解决方案。卖家利用聚石塔的基础设施和服务可以快速搭建一套性能优越、扩容简单、资源弹性伸缩、容灾强、支持多活的系统，聚石塔的功能是赋能商家。<br><strong>EWS(Enterprise Workstation)</strong>，是聚石塔中的企业工作站，下图是EWS的系统总架构图。</p>
</blockquote>
<p><img src="http://oqxil93b6.bkt.clouddn.com/images/%E8%81%9A%E7%9F%B3%E5%A1%94/EWS-architecture.png" alt="聚石塔系统架构图"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://yq.aliyun.com/articles/60879&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;遵循互联网架构“八荣八耻”，解析EWS高质量架构6个维度的20个能力&lt;/a&gt;，本文简单介绍了聚石塔和EWS。&lt;/p&gt;

    
    </summary>
    
      <category term="ali" scheme="http://YDDMAX.github.io/categories/ali/"/>
    
    
      <category term="architecture" scheme="http://YDDMAX.github.io/tags/architecture/"/>
    
      <category term="technology" scheme="http://YDDMAX.github.io/tags/technology/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://YDDMAX.github.io/2017/06/02/hello-world/"/>
    <id>http://YDDMAX.github.io/2017/06/02/hello-world/</id>
    <published>2017-06-01T20:05:34.648Z</published>
    <updated>2017-06-02T16:08:15.582Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<p><img src="/resource/test/test.png" alt="Alt text"><br><a href="/resource/test/tt.pdf">hello-world.md</a><br><a href="/resource/test/test.ccc">hello-world.md</a><br><a href="/resource/test/Desktop.rar">hello-world.md</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
